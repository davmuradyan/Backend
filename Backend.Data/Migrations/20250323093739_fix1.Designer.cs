// <auto-generated />
using Backend.Data.DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(MainDBContext))]
    [Migration("20250323093739_fix1")]
    partial class fix1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Data.Entities.AdminEntity", b =>
                {
                    b.Property<int>("Admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Admin_id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Backend.Data.Entities.BusEntity", b =>
                {
                    b.Property<int>("Bus_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bus_id"));

                    b.Property<int>("Capasity_sitting")
                        .HasColumnType("int");

                    b.Property<int>("Capasity_standing")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Route_id")
                        .HasColumnType("int");

                    b.HasKey("Bus_id");

                    b.HasIndex("Route_id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Backend.Data.Entities.DriverEntity", b =>
                {
                    b.Property<int>("Driver_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Driver_id"));

                    b.Property<int?>("Bus_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Driver_id");

                    b.HasIndex("Bus_id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Backend.Data.Entities.EdgeEntity", b =>
                {
                    b.Property<int>("Edge_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Edge_id"));

                    b.Property<int>("End_stop_id")
                        .HasColumnType("int");

                    b.Property<int>("Start_stop_id")
                        .HasColumnType("int");

                    b.HasKey("Edge_id");

                    b.HasIndex("End_stop_id");

                    b.HasIndex("Start_stop_id");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("Backend.Data.Entities.RouteEdgeEntity", b =>
                {
                    b.Property<int>("RouteEdge_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteEdge_id"));

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<int>("Edge_id")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Route_id")
                        .HasColumnType("int");

                    b.HasKey("RouteEdge_id");

                    b.HasIndex("Edge_id");

                    b.HasIndex("Route_id");

                    b.ToTable("RouteEdges");
                });

            modelBuilder.Entity("Backend.Data.Entities.RouteEntity", b =>
                {
                    b.Property<int>("Route_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Route_id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Route_id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Backend.Data.Entities.StopEntity", b =>
                {
                    b.Property<int>("Stop_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stop_id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Stop_id");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Backend.Data.Entities.BusEntity", b =>
                {
                    b.HasOne("Backend.Data.Entities.RouteEntity", "Route")
                        .WithMany()
                        .HasForeignKey("Route_id");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Backend.Data.Entities.DriverEntity", b =>
                {
                    b.HasOne("Backend.Data.Entities.BusEntity", "Bus")
                        .WithMany()
                        .HasForeignKey("Bus_id");

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("Backend.Data.Entities.EdgeEntity", b =>
                {
                    b.HasOne("Backend.Data.Entities.StopEntity", "End_stop")
                        .WithMany("EndEdges")
                        .HasForeignKey("End_stop_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Entities.StopEntity", "Start_stop")
                        .WithMany("StartEdges")
                        .HasForeignKey("Start_stop_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("End_stop");

                    b.Navigation("Start_stop");
                });

            modelBuilder.Entity("Backend.Data.Entities.RouteEdgeEntity", b =>
                {
                    b.HasOne("Backend.Data.Entities.EdgeEntity", "Edge")
                        .WithMany()
                        .HasForeignKey("Edge_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Entities.RouteEntity", "Route")
                        .WithMany()
                        .HasForeignKey("Route_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edge");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Backend.Data.Entities.StopEntity", b =>
                {
                    b.Navigation("EndEdges");

                    b.Navigation("StartEdges");
                });
#pragma warning restore 612, 618
        }
    }
}
